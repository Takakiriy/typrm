#keyword: typrm specifications
command: #keyword: typrm command list
    search:  #keyword: typrm search  #focus: getSubMatchedScore, toString
        test:
            keyword tag: #keyword: keyword tag test  #ref: ${GitHub}/typrm/src/main.test.ts#describe("searches keyword tag >>"
            glossary tag: #ref: ${GitHub}/typrm/src/main.test.ts#describe("searches glossary tag >>"
            parent match: #ref: ${GitHub}/typrm/src/main.test.ts#describe("searches keyword and parent >>"
                test:  searches keyword and parent >>
                code:  #search: plusParentMatchScore
            idiom: #ref: ${GitHub}/typrm/src/main.test.ts#"idiom"
                #ref: ${GitHub}/typrm/src/lib.ts#splitIdioms
            kana mode: #ref: ${GitHub}/typrm/src/main.test.ts#"kana_mode"
                #ref: ${GitHub}/typrm/src/lib.ts#chageToAlphabets
            find all: #ref: ${GitHub}/typrm/src/main.test.ts#describe("find all >>"
                #search: searchWithoutTags
            mutual search: #ref: ${GitHub}/typrm/src/main.test.ts#describe("mutual search >>"
            ref tag: #ref: ${GitHub}/typrm/src/main.test.ts#describe("print reference >>"
            TYPRM_LINE_NUM_GETTER: #ref: ${GitHub}/typrm/src/main.test.ts#describe("line number getter >>"
            recommend: #ref: ${GitHub}/typrm/src/main.test.ts#describe("recommend >>"
            TYPRM_VERB: #ref: ${GitHub}/typrm/src/main.test.ts#describe("verb >>"
        code:
            #// parent: #search: mainMain
            search:  #ref: ${GitHub}/typrm/src/main.ts#function  search(
                searchSub:  #ref: ${GitHub}/typrm/src/main.ts#function  searchSub
                    listUpFilePaths:  #ref: ${GitHub}/typrm/src/main.ts#function  listUpFilePaths
                    // keyword tag:  #// (#keyword:tag)
                        getKeywordMatchingScore: #🌟  #ref: ${GitHub}/typrm/src/main.ts#function  getKeywordMatchingScore
                            __getSubMatchedScore:  #ref: ${GitHub}/typrm/src/main.ts# #__getSubMatchedScore
                            # if (useThesaurus) {
                                thesaurus.normalize:  #ref: ${GitHub}/typrm/src/main.ts#thesaurus.normalize(aTargetString
                                __getSubMatchedScore:
                            setFoundPosition:  #ref: ${GitHub}/typrm/src/main.ts#setFoundPosition(foundPosition
                        plusParentMatchScore: #keyword:  #ref: ${GitHub}/typrm/src/main.ts#found.plusParentMatchScore
                        # foundLines.push(found);
                    // glossary tag:  #// (#glossary:tag)
                        #  if (glossaryTag) {
                    // alarm tag:  #// (#alarm:tag)
                        getMissedAlarm:
                    searchWithoutTags: #keyword: searchWithoutTags,  typrm find all  #ref: ${GitHub}/typrm/src/main.ts#function  searchWithoutTags
                        addParticiplesFoundCountInFullSearch:  #ref: ${GitHub}/typrm/src/main.ts#function  addParticiplesFoundCountInFullSearch
                    (filter): #🌟  # foundLines = foundLines.filter((found) => (found.counts.matchedSearchKeywordCount === maximumHitWordCount));
                    foundLines.sort(compareScoreAndSoOn):  #ref: ${GitHub}/typrm/src/main.ts#foundLines.sort(compareScoreAndSoOn)
                        compareScoreAndSoOn:  #ref: ${GitHub}/typrm/src/main.ts#function  compareScoreAndSoOn
                        # // Debug score compare in 2 founds
                    #   console.log(foundLineInformation.toString());
                    FoundLine.toString: #🌟  #ref: ${GitHub}/typrm/src/main.ts#getString(): string
                        # var  debugString = ` (score: ${this.score}, wordCount: ${this.targetWordCount}, matchedCount: ${this.matchedTargetKeywordCount})`;
                    snippet:  #ref: ${GitHub}/typrm/src/main.ts#const  snippet =
                    printRef:  #ref: ${GitHub}/typrm/src/main.ts#function  printRef
                        getRelatedLineNumGetter:  #ref: ${GitHub}/typrm/src/main.ts#function  getRelatedLineNumGetter
                        # // print the address and recommend
                        searchAsText:  #ref: ${GitHub}/typrm/src/main.ts#function  searchAsText
                runVerb:  #ref: ${GitHub}/typrm/src/main.ts#function  runVerb
                openDocument:  #ref: ${GitHub}/typrm/src/main.ts#function  openDocument
                runShellCommand:  #ref: ${GitHub}/typrm/src/main.ts#function  runShellCommand
    check:  #keyword: typrm check
        code:
            #// parent: #search: mainMain
            check:  #ref: ${GitHub}/typrm/src/main.ts#function  check(
                checkRoutine:  #ref: ${GitHub}/typrm/src/main.ts#function  checkRoutine
                    // List up original tag
                    // List up to tag
                    // Check the "#same-as:" tag.
                    // Check the condition by "#expect:" tag.
                    // Check if previous line has "template" replaced contents.
                    // Check target file contents by "#file-template:" tag.
    replace:  #keyword: typrm replace
        code:
            #// parent: #search: mainMain
            replace:  #ref: ${GitHub}/typrm/src/main.ts#function  replace(
                replaceMain:  #keyword:  #ref: ${GitHub}/typrm/src/main.ts#function  replaceMain
                    replaceSub:  #keyword:  #ref: ${GitHub}/typrm/src/main.ts#function  replaceSub
                        toTagTree.moveToLine:
                            # currentNewSettings = { ... currentNewSettings, ... parentToTags };
                        # // In settings
                            # // Change a settings value
                                getReplacedLineInSettings:
                        # // Out of settings
                            # // Replace in template
    reset:  #keyword: typrm reset
        code:
            #// parent: #search: mainMain
            reset:  #ref: ${GitHub}/typrm/src/main.ts#function  reset(
tag: #keyword: typrm tags
    list:
        document:
            English: #ref: ${GitHub}/typrm/README-jp.md### Tag list
            Japanese: #ref: ${GitHub}/typrm/README-jp.md### タグ一覧
        code: #ref: ${GitHub}/typrm/src/main.ts#const  originalLabel = 
    keyword tag:
        specifications:
            escape: #keyword: escape in typrm tag  #// "%20"#,  ""%25",  space sharp (_#),  double quatation percent ("%)
                in README: |
                    -   When specifying keywords that include ` #` (blank and #), write `"%20"#`.
                    -   When specifying a keyword that contains `"%`, write `""%25"`.
                test: searches keyword tag >> sharp
                code: unescapePercentByte, escapePercentByte
        test: #search: keyword tag test
        code: #search: typrm search
    search tag:
        test:
            - searches keyword tag >> CSV ignored colon before search tag
            - find all >> search tag
        code:
            const  searchTagIndex = tagIndexOf(keyword, searchLabel);
    copy tag:  #keyword:#copy:
        document:
            English: #ref: ${GitHub}/typrm/README-jp.md### #copy tag: check the text is the same
            Japanese: #ref: ${GitHub}/typrm/README-jp.md### #copy タグを使って文章が同じことをチェックします
        test:
            # describe("checks copy tag >>"
            # describe("replaces in copy tag >>"
        code:
            #// parent: #search: checkRoutine
            check:  #ref: ${GitHub}/typrm/src/main.ts#function  check(
                CopyTag.scanAllTemplate:  #ref: ${GitHub}/typrm/src/main.ts#// CopyTag.scanAllTemplate
                checkRoutine:  #ref: ${GitHub}/typrm/src/main.ts#function  checkRoutine
                    CheckParser.evaluate:  #ref: ${GitHub}/typrm/src/main.ts#// CheckParser.evaluate
                        _evaluateCopyTagStart:
                            # // if copyLabel
                            # // if copyTemplateLabel
                        _evaluateCopyTagContents:
                            # this.parsingCopyTag.contents.push(comparableLine);
                CopyTag.check:  #ref: ${GitHub}/typrm/src/main.ts#// CopyTag.check
                    # // Cut keyword tags
                    checkExpectedTextContents:
                        _main:
                            # if (result === Result.same) {
                            #     unexpectedLine = null;
            replace:  #ref: ${GitHub}/typrm/src/main.ts#function  replace(
                #// parent: #search: replaceSub
                replaceSub:  #ref: ${GitHub}/typrm/src/main.ts#function  replaceSub
                    makeTemplatesInCopyTag:
    if tag:  #keyword:#if:
        outOfFalseBlocks:  #search:
    same-as tag:
        test:
            settings:
                5_check_same_as_tag:  #ref: ${GitHub}/typrm/src/main.test.ts#5_check_same_as_tag
            replaces settings:
                2_replace_13_same_as_tag:  #ref: ${GitHub}/typrm/src/main.test.ts#2_replace_13_same_as_tag
        code:
            makeSettingTree:  #ref: ${GitHub}/typrm/src/main.ts#var  sameAs = getValue
            #// parent: #search: checkRoutine
                checkRoutine:  #ref: ${GitHub}/typrm/src/main.ts#// Check the "#same-as:" tag.
                    # if (variable.value !== setting[expectedVariableName].value) {
            #// parent: #search: replaceSub
                replaceSub:  #ref: ${GitHub}/typrm/src/main.ts#function  replaceSub
                    moveToLine:
                        # const  sameAsSettings =
                        #     return_.currentNewSettings[settingName] = return_.currentNewSettings[r.variableName];
    settings tag:  #keyword:#settings:
        #search: settingStack of typrm makeSettingTree
    template-if tag:  #keyword:#template-if:
        test:
            checks template value >>
                template_if_1_error
            replaces settings >>
                2_replace_9_template_if_1_OK
test:
    test:  #// 機能からテストを探す場合
        #search: typrm command list
        #search: typrm tags
    About ${HOME}:
        Abstract: When running tests, place the project folder in `${HOME}/GitProjects/GitHub/typrm/`.
        ${HOME} in the test data:
            main.test.ts: |  #ref: ~/GitHub/typrm/src/main.test.ts
                pathColor('${HOME}/GitProjects/GitHub/typrm/
            __snapshots__: |  #ref: ~/GitHub/typrm/src/__snapshots__/main.test.ts.snap
                __Project__: ~/GitProjects/GitHub/typrm
    Emulate keyboard input:
        in "typrm.test.ts": Search "inputLines"
        in "main.test.ts": Search "inputPattern"
    Test >> checks snapshots files are confirmed:  #keyword: typrm checks snapshots files are confirmed
        main.test.ts.snap.confirmed-ts ファイルはテキストファイルの比較ツールを使って手動で編集します:
        拡張子の末尾を .snap にしない理由は、Jest が使っていない .snap ファイルを自動的に削除しようとするからです:
        ____.snap.confirmed-ts ファイルが存在する理由は、Jest の自動編集が予期しないデータを追加することがあるからです:
    Test >> reset 2_replace_6_if both:  #keyword: typrm reset 2_replace_6_if both
        replace command:
            settingTree.currentSettings:
                lineNum ==  1: banana, yes
            toTagTree.currentOldSettingsInIfBlock:
                lineNum ==  1: banana, yes
                lineNum == 12: melon, no
        reset command:
            settingTree.currentSettings:  #// oldSetting
                lineNum ==  1: melon, replaced
            return_.currentOldSettingsInIfBlock:
                lineNum ==  1: melon, replaced
                lineNum ==  8: melon, replaced
                lineNum == 10: {}
                lineNum == 12: melon, replaced
            return_.currentNewSettingsByOriginalTag:
                lineNum ==  1: banana, yes
            return_.currentNewSettingsByOriginalTagInIfBlock; outOfFalseBlockByOriginalTag:
                lineNum ==  1: banana, yes;  true
                lineNum ==  8: banana, yes;  true
                lineNum == 10: "{};          false"
                lineNum == 12: banana, yes;  true
            return_.currentNewSettings:
                （reset では対象外）
        課題）複数の if ブロックの中に original タグがあるときの reset :  #keyword: typrm reset with if tag
            reset する対象のファイルのサンプル:
                settings:
                    fruit: banana
                    banana:  #if: $settings.fruit == banana  #disable-tag-tool:
                        __Setting1__: yes
                    not banana:  #if: $settings.fruit != banana  #disable-tag-tool:
                        __Setting1__: no
            解決法:
                - 一時的に if の条件を満たす設定に変えて、if ブロック内の定義を戻す
                - # replace {fruit: banana}, reset {__Setting1__: yes}
                - # replace {fruit: __not_banana}, reset {__Setting1__: no}
                - # {fruit: banana}
                - original タグが残っていたら警告する。別の設定セットに残っていても
        課題）if で参照されている変数と if ブロック内で定義している変数を内部では同時に変更できない:  #keyword: typrm replace with if tag
            置き換える対象のファイルのサンプル:
                settings:
                    fruit: banana
                    banana:  #if: $settings.fruit == banana  #disable-tag-tool:
                        __Setting1__: yes
                    not banana:  #if: $settings.fruit != banana  #disable-tag-tool:
                        __Setting1__: no
                check:
                    yes:  #template: __Setting1__                #disable-tag-tool:
                    banana:  #if: $settings.fruit == banana      #disable-tag-tool:
                        yes  #template: __Setting1__             #disable-tag-tool:
                    not banana:  #if: $settings.fruit != banana  #disable-tag-tool:
                        no  #template: __Setting1__              #disable-tag-tool:
            解決法:
                if ブロック内で定義している変数は、if で参照されている変数が置き換えた後にすること
            理由:
                置き換えるときに指定するパラメーター: { fruit: melon, __Settings1__: replaced }
                このとき、同時に置き換えると、置き換える前が [check/yes] と [check/not banana/no] の2種類(yes, no)あり、置き換える範囲が曖昧になって良くない:
                    サンプル）ある変数がとりうる値が aa, aaa だけのとき、置き換える前の値として 2種類を認めてしまうと aaa が aaaa に置き換わる可能性があり、良くない:
                先に fruit を置き換えるときの置き換える前は、[check/yes] のみ:
                次に __Settings1__ を置き換えるときの置き換える前は、(check/yesだった)[check/no] と [check/not banana/no] で 1種類（2箇所）:
            コードの説明:
                IfTagParser.thisIsOutOfFalseBlock === true  &&  IfTagParser.isReplacable === false は、[check/not banana/no]
debug:
    debugger:  #// Debug with Visual Studio Code
        Debug from launch:
            $ export __Variables__=__Value__
            $ code __Project__
            Select "Debug from launch" in "Run and Debug" view
            Press F5 key
        Others:
            $ code __Project__
            Select "__LaunchName__" in "Run and Debug" view
            Press F5 key
    functions:  #// typrm functions debug
        Search function debug points:
            How to use:
                - Set "var  debugPointLineNum" and "var  debugFilePathPart" in "main.ts"
                - Set a break point at "function  DebugWatchPoint" in "main.ts"
        Search result order:
            compareScoreAndSoOn:  #// This shows a compare reason.
                How to use:
                    - Change comment out in "function  compareScoreAndSoOn(" in "main.ts"
                    - Set "debugLineNums" value in "function  compareScoreAndSoOnDebug" in "main.ts"
                    - Set a break point at "function  DebugWatchPoint" in "main.ts"
            debugSearchScore:  #// This shows matched keyword scores.
                How to use: Set to true. Near the "debugSearchScore" in "main.ts"
        Search result color:  #// This shows colored string parts.
            How to use: Change to true near the "coloredStrings debug" in "main.ts" and set break point to watch "d".
        DebugWatchPoint: #keyword: typrm DebugWatchPoint
            How to use:
                - Cut comment out of debug code. Near the "DebugWatchPoint" in "main.ts"
                - Break at last of operations.
other specifications:
    start up:
        start from shell:
            main:  #ref: ${GitHub}/typrm/src/main.ts#function  main(
                mainMain:  #ref: ${GitHub}/typrm/src/main.ts#function  mainMains(
        start from test:
            callMainFromJest:  #ref: ${GitHub}/typrm/src/main.ts#function  callMainFromJest(
                mainMain:  #keyword:  #ref: ${GitHub}/typrm/src/main.ts#function  mainMains(
    library: #keyword: typrm library
        file:
            initializeTestInputFile:  #ref: main.test.ts
            initializeTestInputFiles:  #ref: main.test.ts
            fs.existsSync:  #// standard
            fs.readFileSync:  #// standard
            lib.writeFileSync:  #ref: main.test.ts
            lib.deleteFileSync:  #ref: main.test.ts
            lib.replaceFileSync:  #ref: lib.ts
        replace:
            (string).replace:  #// standard
            lib.replace:  #ref: lib.ts
            lib.replaceAsync:  #ref: lib.ts
            lib.replaceFileSync:  #ref: lib.ts
        others:
            lib.chdirInProject:  #ref: main.test.ts
            fs.mkdirSync:  #// standard
    settingStack of typrm makeSettingTree: #keyword:
        overview: |
            'settingStack' has parent indentLevel.
        example:
            YAML: |
                1:  A:
                2:      setting:
                :
                15:     A:
                16:         setting:
                31:     B:
                32:         setting:
                37:         #if__: $settings.target_ == app
            lineNum = 16 >> settingStack: |
                { lineNum:  0, index: '/',    indentLevel: 0, ...}
                { lineNum:  2, index: '/1',   indentLevel: 4, ...}
                { lineNum: 16, index: '/1/1', indentLevel: 8, ...}
            lineNum = 31 >> settingStack: |  #focus: /1/2
                { lineNum:  0, index: '/', ...}
                { lineNum:  2, index: '/1', ...}
                { lineNum:  0, index: '/1/2', ...}
            lineNum = 32 >> settingStack: |
                { lineNum:  0, index: '/', ...}
                { lineNum:  2, index: '/1', ...}
                { lineNum: 32, index: '/1/2', ...}
            lineNum = 37 >> settingStack: |
                { lineNum:  0, index: '/', ...}
                { lineNum:  2, index: '/1', ...}
                { lineNum: 32, index: '/1/2', ...}
                { lineNum: 37, index: '/1/2/a', ...}
    outOfFalseBlocks:  #focus: outOfFalseBlocks, indicesWithIf
        moveToLine (SettingsTree):
            moveToLine_Immutably:
                addCurrentSettingsInIfTag_Immutably:
                    # class SettingsTree {
                    #     addCurrentSettingsInIfTag_Immutably(
                    #         for (const [lineNum, index] of Array.from(settingsTree.indicesWithIf.entries())) {
                    #             outOfFalseBlocks.set(lineNum, falseIndex == disabledFalseIndex);
        moveToLine (ReplaceToTagTree):
            moveToLine_Immutably:
                # class ReplaceToTagTree {
                #     moveToLine_Immutably(parser: Parser, settingsTree: Readonly<SettingsTree>): ReplaceToTagTree_for_moveToLine {
                #         return_.currentIsOutOfFalseBlock = outOfFalseBlocks.get(lineNum)!;
    thesaurus relation: #keyword: typrm thesaurus relation
        thesaurus.csv:
            JavaScript, js
            TypeScript, ts, JavaScript
            React, rc, TypeScript
        search ts:
            search
                ts  →  TypeScript
                TypeScript  →  TypeScript              // search keyword is normalized "without" relation
            target
                JavaScript  → (TypeScript) found       // target keyword is normalized "with" relation, but TypeScript is not normalized because it is a search keyword
                TypeScript  →  TypeScript  found
                React       →  React       not found
        search js:
            search
                js  →  JavaScript
                JavaScript  →  JavaScript              // search keyword is normalized "without" relation
            target
                JavaScript  →  JavaScript  found       // target keyword JavaScript is not normalized because it is a search keyword
                TypeScript  →  TypeScript  not found
                React       →  React       not found
        search rc:
            search
                rc  →  React
            target
                JavaScript  → (React)  found     // search keyword is normalized with multi relations
                TypeScript  → (React)  found  
                React       →  React   found  
